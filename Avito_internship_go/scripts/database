CREATE TABLE account (
	account_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	account_cash DECIMAL(10,2) CHECK (account_cash >= 0),
	account_reserved_cash DECIMAL(10, 2) CHECK (account_reserved_cash >= 0)
);

CREATE TABLE operation (
	operation_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	operation_type VARCHAR(10) NOT NULL
);

INSERT INTO public.operation(operation_type)
VALUES ('deposit'), ('withdraw'), ('transfer');

CREATE TABLE service (
	service_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	service_name VARCHAR(255) NOT NULL,
	service_price DECIMAL(10, 2) CHECK (service_price > 0)
);

CREATE TABLE reserv (
	reserv_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	account_id integer REFERENCES account (account_id),
	service_id integer REFERENCES service (service_id),
	reserv_time TIMESTAMP WITH TIME ZONE DEFAULT (now())
);

CREATE TABLE report (
	report_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    account_id integer REFERENCES account (account_id),
    service_id integer REFERENCES service (service_id),
    report_time TIMESTAMP WITH TIME ZONE DEFAULT (now())
);

CREATE TABLE transaction_history (
	transaction_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	sender_id integer REFERENCES account (account_id),
	receiver_id integer REFERENCES account (account_id),
	operation_id integer REFERENCES operation (operation_id),
	transaction_time TIMESTAMP WITH TIME ZONE DEFAULT (now())
	transaction_price DECIMAL(10, 2) CHECK (transaction_price > 0)
);